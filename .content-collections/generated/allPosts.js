
export default [
  {
    "content": "## CSS滚动动画\n\n### 1. 在Body上设置css变量--scroll\n\n我们可以直接在 CSS 中实现很多滚动动画，只需要 JavaScript 提供的一点信息：页面滚动了多远。\n\n```typescript\nwindow.addEventListener('scroll', () => {\n  document.body.style.setProperty('--scroll', window.pageYOffset / (document.body.offsetHeight - window.innerHeight));\n}, false);\n```\n1. 在Body上设置css变量--scroll\n2. 计算滚动进度\n```typescript\nwindow.pageYOffset / (document.body.offsetHeight - window.innerHeight)\n```\n- `window.pageYOffset`: 当前文档相对于视口顶部已经滚动的像素数\n- `document.body.offsetHeight`: 整个页面\\<body\\>的总高度(包含内容的全部高度)\n- `window.innerHeight`: 浏览器可视区(viewport)的高度\n\n3. 计算公式\n\n$$\n\\text{ratio}\n= \\frac{\\text{pageYOffset}}\n       {\\text{body.offsetHeight} - \\text{window.innerHeight}}\n$$\n\n- 分母是“总高度-视口高度”也就是页面可滚动的最大距离\n- 整体效果:每次页面滚动时，自动更新css变量--scroll的值，随时得到一个0-1的数值，获得滚动进度\n\n\n\n\n## 2. 设置动画\n\n#### 首先我们设置一个无限旋转的SVG\n```CSS\nsvg {\n  display: inline-block;\n  animation: rotate 1s linear infinite;\n}\n\n@keyframes rotate {\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n<iframe height=\"300\" style={{width: '100%'}} scrolling=\"no\" title=\"Infinite Spinning SVG\" src=\"https://codepen.io/chriscoyier/embed/qBbrwBJ?default-tab=result\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen>\n  See the Pen <a href=\"https://codepen.io/chriscoyier/pen/qBbrwBJ\">\n  Infinite Spinning SVG</a> by Chris Coyier  (<a href=\"https://codepen.io/chriscoyier\">@chriscoyier</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n#### 使旋转受控\n```CSS\nsvg {\n  position: fixed;         /* 固定在视口，始终可见 */\n\n  animation: rotate 1s linear infinite;  \n                           /* 定义一个 1 秒一圈、匀速、无限循环的“rotate”动画 */\n  animation-play-state: paused;\n                           /* 暂停动画的自动播放，不让它自己动 */\n  animation-delay: calc(var(--scroll) * -1s);\n                           /* 根据 --scroll 的值（0～1），计算一个 负 的延迟 */\n}\n```\n- animation-play-state: paused \n默认情况下动画会被暂停，不让它自己播放\n- animation-delay: calc(var(--scroll) * -1s)\n  - `var(--scroll)`是一个0-1之间的滚动比例(由js更新),乘以`-1s`,得到一个负延迟\n  - 负延迟的作用：让动画“从已经播放过这么长的时间点”开始渲染：\n    - 例如`animation-delay: -0.5s` 相当于动画已经跑了0.5秒，正好处于180度的位置\n    \n<iframe height=\"300\" style={{width: '100%'}} scrolling=\"no\" title=\"Untitled\" src=\"https://codepen.io/tzh943855696-the-sans/embed/MYYZYra?default-tab=&theme-id=dark\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen>\n  See the Pen <a href=\"https://codepen.io/tzh943855696-the-sans/pen/MYYZYra\">\n  Untitled</a> by Locke  (<a href=\"https://codepen.io/tzh943855696-the-sans\">@tzh943855696-the-sans</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n### 综合\n总的来说，每次页面滚动，JS更新`--scroll`(0 -> 1),CSS 用它来计算一个负延迟，配合暂停的动画，就能在任意时刻“跳转”到相应的旋转角度，实现“滚动到哪，旋转到哪”的效果。\n我们还可以将滚动相关的动画属性都放在:root\\{\\}上，这样可以控制页面上的所有动画\n\n<iframe height=\"300\" style={{width: '100%'}} scrolling=\"no\" title=\"Bind CSS keyframe animation to scroll\" src=\"https://codepen.io/chriscoyier/embed/NWxpJVx?default-tab=&theme-id=dark\" frameBorder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowFullScreen>\n  See the Pen <a href=\"https://codepen.io/chriscoyier/pen/NWxpJVx\">\n  Bind CSS keyframe animation to scroll</a> by Chris Coyier  (<a href=\"https://codepen.io/chriscoyier\">@chriscoyier</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>",
    "title": "滚动动画",
    "date": "2025-04-05T21:10:00+08:00",
    "summary": "Minim irure nulla tempor qui do occaecat nostrud ad in. Occaecat cupidatat commodo enim nostrud dolore aute esse magna. Magna ullamco est consectetur aute sunt magna nisi eu. Eiusmod incididunt nisi veniam esse cillum ea ea. Reprehenderit esse sint tempor velit dolor et pariatur enim incididunt commodo eiusmod ipsum aliqua.Incididunt quis non consectetur nisi occaecat sunt officia pariatur ea ullamco. Deserunt sint labore nisi Lorem laborum eu sint cupidatat nostrud adipisicing duis ipsum consectetur. Lorem in proident mollit sit ullamco nulla proident officia in exercitation non. In occaecat ullamco nisi veniam consectetur ex ut culpa. Id et magna quis consectetur ullamco excepteur commodo. Qui labore ipsum quis cupidatat duis duis aute magna ullamco et exercitation excepteur excepteur. Magna incididunt velit adipisicing consectetur tempor commodo est non.",
    "slug": "intro"
  },
  {
    "content": "## tailwind响应式布局 \nTailwind是移动优先的响应式设计, 响应式分割分为: 2xl,xl,lg,md,sm,xs\n\n\n## 目录  \n1. [章节一](#章节一)  \n2. [章节二](#章节二)  \n3. [章节三](#章节三)  \n\n\n## 章节一  \n### 子标题  \n- 列表项1  \n- 列表项2  \n  - 子列表项  \n\n> 引用块示例：  \n> 这是一段引用内容。",
    "title": "Tailwind CSS",
    "date": "2025-04-05T21:10:00+08:00",
    "summary": "Tailwind CSS的学习记录",
    "slug": "test"
  }
]